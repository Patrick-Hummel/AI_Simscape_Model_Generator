# -*- coding: utf-8 -*-

"""
Abstract system model generated by AI, using abstract components and connections.

Last modification: 28.11.2023
"""

__version__ = "1"
__author__ = "Patrick Hummel"

from typing import List

from src.abstract_model.abstract_components import AbstractComponent
from src.abstract_model.abstract_connections import AbstractConnection


class AbstractSystem:

    def __init__(self):
        self._abstract_components_list = []
        self._abstract_connections_list = []

    @property
    def abstract_components_list(self) -> List[AbstractComponent]:
        return self._abstract_components_list

    @property
    def abstract_connections_list(self) -> List[AbstractConnection]:
        return self._abstract_connections_list

    def create_from_json_data(self, json_data: dict):

        new_comp_dict = {}

        # Iterate through components
        for component in json_data.get("components", []):

            implemented_component_types_dict = AbstractComponent.get_implemented_component_types_dict()

            comp_unique_name = component['id']
            comp_type = comp_unique_name.split("_")[0]
            comp_id = comp_unique_name.split("_")[1]
            input_ports_list = []
            output_ports_list = []

            for port in component.get("input_ports", []):
                input_ports_list.append(port['id'])

            for port in component.get("output_ports", []):
                output_ports_list.append(port['id'])

            if comp_type in implemented_component_types_dict:
                new_comp = implemented_component_types_dict[comp_type](comp_id, comp_unique_name,
                                                                       input_ports_list, output_ports_list)
                new_comp_dict[comp_unique_name] = new_comp
                self._abstract_components_list.append(new_comp)
            else:
                raise ValueError(f"Component of type {component['id']} does not exist")

        for connection in json_data.get("connections", []):

            from_comp = None
            from_port_unique_name = connection["from"]

            to_comp = None
            to_port_unique_name = connection["to"]

            # Go through all components to finde references ports (from and to component may be the same)
            for comp in new_comp_dict.keys():

                current_component = new_comp_dict[comp]

                if from_port_unique_name in current_component.output_ports_list:
                    from_comp = current_component

                if to_port_unique_name in current_component.input_ports_list:
                    to_comp = current_component

                # Stop search once both components have been found
                if isinstance(from_comp, AbstractComponent) and isinstance(to_comp, AbstractComponent):
                    break

            if isinstance(from_comp, AbstractComponent) and isinstance(to_comp, AbstractComponent):
                self._abstract_connections_list.append(AbstractConnection(from_comp, from_port_unique_name, to_comp, to_port_unique_name))
