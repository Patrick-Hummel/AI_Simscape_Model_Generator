# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'src/gui/help_dialog_aisimogen.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

"""
AI Simscape Model Generator - Generating MATLAB Simscape Models using Large Language Models.
Copyright (C) 2024  Patrick Hummel

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

"""

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_HelpDialog(object):
    def setupUi(self, HelpDialog):
        HelpDialog.setObjectName("HelpDialog")
        HelpDialog.resize(640, 480)
        self.plainTextEdit = QtWidgets.QPlainTextEdit(HelpDialog)
        self.plainTextEdit.setGeometry(QtCore.QRect(10, 10, 611, 451))
        self.plainTextEdit.setReadOnly(True)
        self.plainTextEdit.setObjectName("plainTextEdit")

        self.retranslateUi(HelpDialog)
        QtCore.QMetaObject.connectSlotsByName(HelpDialog)

    def retranslateUi(self, HelpDialog):
        _translate = QtCore.QCoreApplication.translate
        HelpDialog.setWindowTitle(_translate("HelpDialog", "AISiMoGen - How-To instructions"))
        self.plainTextEdit.setPlainText(_translate("HelpDialog", "1) Create a file called \".env\" in the project directory. Make sure it is excluded from version control. Add your API keys for the large language models you want to use. Name the keys \"OPENAI_API_KEY\", \"TOGETHER_API_KEY\" and \"ANTHROPIC_API_KEY\" respectively.\n"
"\n"
"2) Select the components you want to include in the generated model in the \"Configuration\" tab. You may also adjust the temperature of the large language model here (default is 1.0). If the large language model you want to use does not support function call prompts, remove the checkmark.\n"
"\n"
"3) Select the large language model you want to use in the dropdown at the bottom of the window. Different large language models may be used for different tasks in the generation process.\n"
"\n"
"4) Enter the description of the system (specifically, an electrical circuit) you want to generate. Click \"Send\" to task the AI with creating a summary.\n"
"\n"
"5) Check if the summary is correct, as this is the basis for the next step of generating an abstract system model. Click \"Verify\" to proceed.\n"
"\n"
"6) Once completed, inspect the abstract system model. Provide textual feedback and send the feedback if necessary. If satisfied, click \"Create Detailed Model\".\n"
"\n"
"7) Inspect the detailed system model. Add or remove component blocks and subsystems. Add or remove connections. Adjust parameters or update subsystems using fault-tolerant design patterns.\n"
"\n"
"8) Once satisfied, click \"Build Simscape Model\". "))
